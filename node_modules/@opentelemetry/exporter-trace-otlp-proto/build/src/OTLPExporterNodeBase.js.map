{"version":3,"file":"OTLPExporterNodeBase.js","sourceRoot":"","sources":["../../src/OTLPExporterNodeBase.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4CAA0C;AAC1C,sFAKiD;AASjD;;GAEG;AACH,MAAsB,oBAGpB,SAAQ,+CAAgD;IAGxD,YAAY,SAAqC,EAAE;QACjD,KAAK,CAAC,MAAM,CAAC,CAAA;IACf,CAAC;IAEO,YAAY,CAClB,OAAqB,EACrB,SAAqB,EACrB,OAAqD;QAErD,MAAM,OAAO,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACpD,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAC/D,CAAC,CAAC;aACC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE5B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,UAAU,GAAG,GAAG,EAAE;YACtB,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACrD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACzC,CAAC,CAAA;QACD,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IACvC,CAAC;IAEQ,MAAM,CAAC,MAAkC;QAChD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,yEAAyE;QACzE,gDAAgD;QAChD,YAAY,CAAC,GAAG,EAAE;YAChB,8DAA8D;YAC9D,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;YACrC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAEQ,IAAI,CACX,OAAqB,EACrB,SAAqB,EACrB,OAAqD;QAErD,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,UAAI,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;YAC5D,OAAO;SACR;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,yEAAyE;YACzE,gDAAgD;YAChD,YAAY,CAAC,GAAG,EAAE;gBAChB,8DAA8D;gBAC9D,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACnC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBAClB,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;SAChD;IACH,CAAC;CAGF;AA/DD,oDA+DC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  OTLPExporterNodeBase as OTLPExporterBaseMain,\n  otlpTypes,\n  OTLPExporterNodeConfigBase,\n  CompressionAlgorithm,\n} from '@opentelemetry/exporter-trace-otlp-http';\nimport { ServiceClientType } from './types';\n\ntype SendFn = <ExportItem, ServiceRequest>(collector: OTLPExporterNodeBase<ExportItem, ServiceRequest>,\n  objects: ExportItem[],\n  compression: CompressionAlgorithm,\n  onSuccess: () => void,\n  onError: (error: otlpTypes.OTLPExporterError) => void) => void;\n\n/**\n * Collector Metric Exporter abstract base class\n */\nexport abstract class OTLPExporterNodeBase<\n  ExportItem,\n  ServiceRequest\n> extends OTLPExporterBaseMain<ExportItem, ServiceRequest> {\n  private _send!: SendFn;\n\n  constructor(config: OTLPExporterNodeConfigBase = {}) {\n    super(config)\n  }\n\n  private _sendPromise(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    const promise = new Promise<void>((resolve, reject) => {\n      this._send(this, objects, this.compression, resolve, reject);\n    })\n      .then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    }\n    promise.then(popPromise, popPromise);\n  }\n\n  override onInit(config: OTLPExporterNodeConfigBase): void {\n    this._isShutdown = false;\n    // defer to next tick and lazy load to avoid loading protobufjs too early\n    // and making this impossible to be instrumented\n    setImmediate(() => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { onInit } = require('./util');\n      onInit(this, config);\n    });\n  }\n\n  override send(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    if (this._isShutdown) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    if (!this._send) {\n      // defer to next tick and lazy load to avoid loading protobufjs too early\n      // and making this impossible to be instrumented\n      setImmediate(() => {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { send } = require('./util');\n        this._send = send;\n        this._sendPromise(objects, onSuccess, onError);\n      });\n    } else {\n      this._sendPromise(objects, onSuccess, onError);\n    }\n  }\n\n  abstract getServiceClientType(): ServiceClientType;\n}\n"]}