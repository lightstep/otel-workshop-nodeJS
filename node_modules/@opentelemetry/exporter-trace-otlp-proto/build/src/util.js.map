{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,sFAKiD;AACjD,6BAA6B;AAE7B,mCAA4C;AAG5C,yCAAyC;AAEzC,IAAI,kBAAoC,CAAC;AAEzC,SAAgB,qBAAqB;IACnC,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AAFD,sDAEC;AAED,SAAgB,MAAM,CACpB,SAA2D,EAC3D,OAAmC;IAEnC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IACpD,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,CAAC;IACnC,IAAI,CAAC,WAAW,GAAG,UAAU,MAAM,EAAE,MAAM;QACzC,OAAO,GAAG,GAAG,IAAI,MAAM,EAAE,CAAC;IAC5B,CAAC,CAAC;IACF,IAAI,SAAS,CAAC,oBAAoB,EAAE,KAAK,yBAAiB,CAAC,KAAK,EAAE;QAChE,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC1B,4CAA4C;YAC5C,gDAAgD;YAChD,0CAA0C;YAC1C,4DAA4D;SAC7D,CAAC,CAAC;QACH,kBAAkB,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,CAAC,2BAA2B,CAAC,CAAC;KACrE;SAAM;QACL,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC1B,4CAA4C;YAC5C,gDAAgD;YAChD,8CAA8C;YAC9C,gEAAgE;SACjE,CAAC,CAAC;QACH,kBAAkB,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU,CAAC,6BAA6B,CAAC,CAAC;KACvE;AACH,CAAC;AA1BD,wBA0BC;AAED,SAAgB,IAAI,CAClB,SAA2D,EAC3D,OAAqB,EACrB,WAAiC,EACjC,SAAqB,EACrB,OAAqD;;IAErD,MAAM,cAAc,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAElD,MAAM,OAAO,GAAG,MAAA,qBAAqB,EAAE,0CAAE,MAAM,CAAC,cAAc,CAAC,CAAC;IAChE,IAAI,OAAO,EAAE;QACX,MAAM,IAAI,GAAG,MAAA,qBAAqB,EAAE,0CAAE,MAAM,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC;QAC/D,IAAI,IAAI,EAAE;YACR,uCAAY,CACV,SAAS,EACT,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EACjB,wBAAwB,EACxB,SAAS,EACT,OAAO,CACR,CAAC;SACH;KACF;SAAM;QACL,OAAO,CAAC,IAAI,oCAAS,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;KACtD;AACH,CAAC;AAxBD,oBAwBC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  otlpTypes,\n  sendWithHttp,\n  OTLPExporterNodeConfigBase,\n  CompressionAlgorithm,\n} from '@opentelemetry/exporter-trace-otlp-http';\nimport * as path from 'path';\n\nimport { ServiceClientType } from './types';\nimport { OTLPExporterNodeBase } from './OTLPExporterNodeBase';\nimport type { Type } from 'protobufjs';\nimport * as protobufjs from 'protobufjs';\n\nlet ExportRequestProto: Type | undefined;\n\nexport function getExportRequestProto(): Type | undefined {\n  return ExportRequestProto;\n}\n\nexport function onInit<ExportItem, ServiceRequest>(\n  collector: OTLPExporterNodeBase<ExportItem, ServiceRequest>,\n  _config: OTLPExporterNodeConfigBase\n): void {\n  const dir = path.resolve(__dirname, '..', 'protos');\n  const root = new protobufjs.Root();\n  root.resolvePath = function (origin, target) {\n    return `${dir}/${target}`;\n  };\n  if (collector.getServiceClientType() === ServiceClientType.SPANS) {\n    const proto = root.loadSync([\n      'opentelemetry/proto/common/v1/common.proto',\n      'opentelemetry/proto/resource/v1/resource.proto',\n      'opentelemetry/proto/trace/v1/trace.proto',\n      'opentelemetry/proto/collector/trace/v1/trace_service.proto',\n    ]);\n    ExportRequestProto = proto?.lookupType('ExportTraceServiceRequest');\n  } else {\n    const proto = root.loadSync([\n      'opentelemetry/proto/common/v1/common.proto',\n      'opentelemetry/proto/resource/v1/resource.proto',\n      'opentelemetry/proto/metrics/v1/metrics.proto',\n      'opentelemetry/proto/collector/metrics/v1/metrics_service.proto',\n    ]);\n    ExportRequestProto = proto?.lookupType('ExportMetricsServiceRequest');\n  }\n}\n\nexport function send<ExportItem, ServiceRequest>(\n  collector: OTLPExporterNodeBase<ExportItem, ServiceRequest>,\n  objects: ExportItem[],\n  compression: CompressionAlgorithm,\n  onSuccess: () => void,\n  onError: (error: otlpTypes.OTLPExporterError) => void\n): void {\n  const serviceRequest = collector.convert(objects);\n\n  const message = getExportRequestProto()?.create(serviceRequest);\n  if (message) {\n    const body = getExportRequestProto()?.encode(message).finish();\n    if (body) {\n      sendWithHttp(\n        collector,\n        Buffer.from(body),\n        'application/x-protobuf',\n        onSuccess,\n        onError\n      );\n    }\n  } else {\n    onError(new otlpTypes.OTLPExporterError('No proto'));\n  }\n}"]}