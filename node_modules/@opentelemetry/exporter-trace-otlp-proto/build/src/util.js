"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.send = exports.onInit = exports.getExportRequestProto = void 0;
const exporter_trace_otlp_http_1 = require("@opentelemetry/exporter-trace-otlp-http");
const path = require("path");
const types_1 = require("./types");
const protobufjs = require("protobufjs");
let ExportRequestProto;
function getExportRequestProto() {
    return ExportRequestProto;
}
exports.getExportRequestProto = getExportRequestProto;
function onInit(collector, _config) {
    const dir = path.resolve(__dirname, '..', 'protos');
    const root = new protobufjs.Root();
    root.resolvePath = function (origin, target) {
        return `${dir}/${target}`;
    };
    if (collector.getServiceClientType() === types_1.ServiceClientType.SPANS) {
        const proto = root.loadSync([
            'opentelemetry/proto/common/v1/common.proto',
            'opentelemetry/proto/resource/v1/resource.proto',
            'opentelemetry/proto/trace/v1/trace.proto',
            'opentelemetry/proto/collector/trace/v1/trace_service.proto',
        ]);
        ExportRequestProto = proto === null || proto === void 0 ? void 0 : proto.lookupType('ExportTraceServiceRequest');
    }
    else {
        const proto = root.loadSync([
            'opentelemetry/proto/common/v1/common.proto',
            'opentelemetry/proto/resource/v1/resource.proto',
            'opentelemetry/proto/metrics/v1/metrics.proto',
            'opentelemetry/proto/collector/metrics/v1/metrics_service.proto',
        ]);
        ExportRequestProto = proto === null || proto === void 0 ? void 0 : proto.lookupType('ExportMetricsServiceRequest');
    }
}
exports.onInit = onInit;
function send(collector, objects, compression, onSuccess, onError) {
    var _a, _b;
    const serviceRequest = collector.convert(objects);
    const message = (_a = getExportRequestProto()) === null || _a === void 0 ? void 0 : _a.create(serviceRequest);
    if (message) {
        const body = (_b = getExportRequestProto()) === null || _b === void 0 ? void 0 : _b.encode(message).finish();
        if (body) {
            exporter_trace_otlp_http_1.sendWithHttp(collector, Buffer.from(body), 'application/x-protobuf', onSuccess, onError);
        }
    }
    else {
        onError(new exporter_trace_otlp_http_1.otlpTypes.OTLPExporterError('No proto'));
    }
}
exports.send = send;
//# sourceMappingURL=util.js.map